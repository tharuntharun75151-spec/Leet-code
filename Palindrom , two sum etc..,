#Longest Common Prefix
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs:
            return ""
        
        # Start with the first string as the prefix
        prefix = strs[0]
        
        # Compare with each subsequent string
        for i in range(1, len(strs)):
            current_string = strs[i]
            
            # Shorten the prefix until it matches the beginning of current string
            while not current_string.startswith(prefix):
                prefix = prefix[:-1]  # Remove last character
                
                # If prefix becomes empty, no common prefix exists
                if not prefix:
                    return ""
        
        return prefix


#Merge Two Sorted Lists
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        # Create a dummy node to simplify the code
        dummy = ListNode(0)
        current = dummy
        
        # Traverse both lists while both have nodes
        while list1 and list2:
            if list1.val <= list2.val:
                current.next = list1
                list1 = list1.next
            else:
                current.next = list2
                list2 = list2.next
            current = current.next
        
        # Attach the remaining nodes from the non-empty list
        if list1:
            current.next = list1
        else:
            current.next = list2
        
        return dummy.next

# Palindrome Number
class Solution:
    def isPalindrome(self, x: int) -> bool:
        s1=str(x)
        j=''
        for i in s1[::-1]:
            j+=i
        if j==s1:
            return True

#Remove Element

class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        k = 0  # Pointer for placing non-val elements
        
        for i in range(len(nums)):
            if nums[i] != val:
                nums[k] = nums[i]
                k += 1
        
        return k

#Roman to Integer

def romanToInt(s: str) -> int:
    # Mapping of Roman numerals to their integer values
    roman_map = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }
    
    total = 0
    i = 0
    n = len(s)
    
    while i < n:
        # Check if current character forms a subtraction pair with next character
        if i + 1 < n:
            current_val = roman_map[s[i]]
            next_val = roman_map[s[i + 1]]
            
            # Check for subtraction cases
            if (s[i] == 'I' and (s[i + 1] == 'V' or s[i + 1] == 'X')) or \
               (s[i] == 'X' and (s[i + 1] == 'L' or s[i + 1] == 'C')) or \
               (s[i] == 'C' and (s[i + 1] == 'D' or s[i + 1] == 'M')):
                total += (next_val - current_val)
                i += 2  # Skip next character since we've processed the pair
                continue
        
        # Regular case - just add the current value
        total += roman_map[s[i]]
        i += 1
    
    return total

#Two Sum

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if nums[i]+nums[j]==target:
                    return [i,j]        
                    break

#Valid Paranthesis
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {')': '(', '}': '{', ']': '['}
    
        for char in s:
            if char in mapping.values():  
                stack.append(char)
            elif char in mapping: 
                if not stack or stack[-1] != mapping[char]:
                    return False
                stack.pop()
    
        return len(stack) == 0
